/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servidor_rmi.ventanas;

import java.awt.event.KeyEvent;
import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import johnarrieta.apipc.v1.Computador;
import logica.OperacionesCliente;
import logica.OperacionesServidor;
import logica.Utilidad;
import servidor_rmi.logica.CRMIServer;

/**
 *
 * @author Nilson Nieto
 */
public class VentanaRMIServerl extends javax.swing.JFrame {

    //variable que permite gestonar la IP del Nodo Central
    private Inet4Address ip;

    //Trabajar con la tabla
    private DefaultTableModel modeloTable;

    //Permite hacer referencia a un cliente espesifico que sea seleccionado por el usuario
    private OperacionesCliente clienteActual;

    
    // Es el objeto que permite exportar nuestro servidor_rmi a la red
    Registry registrador;
    
    //Es el objeto servidor que permite realizar las acciones anteriores
    private CRMIServer servidor;
    private ArrayList<Computador> list;
    
    public boolean estado;

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaRMIServerl() {

        initComponents();

        // Obtenemos el modelo de la tabla definida mediante el GUI de Netbeans
        modeloTable = (DefaultTableModel) jTableClientesConectados.getModel();
        list= new ArrayList<>();
        //Centramos el Frame
        setLocationRelativeTo(null);

        try {
            // Le asignamos la IP del PC actual
            ip = (Inet4Address) Inet4Address.getLocalHost();
        } catch (UnknownHostException ex) {
            System.out.println("Error al capturar la IP del Servidor...");
            Logger.getLogger(VentanaRMIServerl.class.getName()).log(Level.SEVERE, null, ex);
        }

        //   setIconImage(new ImageIcon(getClass().getResource("/serverudec/imagenes/UdeC2.png")).getImage());
        jLabelIP.setText(ip.toString());


    }

    public void iniciarServidor(CRMIServer objetoExportado) {

        Utilidad.setCodeBase(OperacionesServidor.class);
        try {

            OperacionesServidor ObjetoRemoto = (OperacionesServidor) UnicastRemoteObject.exportObject(objetoExportado, Integer.parseInt(objetoExportado.getPuerto()));

            registrador = LocateRegistry.createRegistry(Integer.parseInt(objetoExportado.getPuerto()));

            registrador.rebind("ObjetoServidor", ObjetoRemoto);

            mostrarMensajes("Servidor Listo");

            estado = true;

        } catch (Exception e) {
            mostrarMensajes("Erro al exportar el objetoServidor"+e.getMessage());

        }

    }

    public void detenerServidor() {

        try {

            registrador.unbind("ObjetoServidor");
            UnicastRemoteObject.unexportObject(registrador, true);

            mostrarMensajes("Servidor desconectado");
            estado = false;
            servidor = null;
            registrador = null;

        } catch (RemoteException | NotBoundException e) {
          mostrarMensajes("Erro al detener el servidor"+e.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        campoPuerto = new javax.swing.JTextField();
        botonIniciar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabelIP = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableClientesConectados = new javax.swing.JTable();
        jBver = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemReiniciar = new javax.swing.JMenuItem();
        jMenuItemBloquear = new javax.swing.JMenuItem();
        jMenuItemApagar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Redes RMI");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos de conexion:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Puerto:");

        campoPuerto.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        campoPuerto.setForeground(new java.awt.Color(0, 102, 0));
        campoPuerto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        campoPuerto.setText("8779");
        campoPuerto.setToolTipText("Sugerencia : utilizar puertos del 2000 en adelante");
        campoPuerto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                campoPuertoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoPuertoKeyTyped(evt);
            }
        });

        botonIniciar.setMnemonic('R');
        botonIniciar.setText("INICIAR");
        botonIniciar.setToolTipText("Inicia o detiene el Servidor ");
        botonIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIniciarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("IP :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(campoPuerto))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(108, Short.MAX_VALUE)
                .addComponent(botonIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(campoPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelIP, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(botonIniciar)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Panel de control", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N
        jPanel3.setForeground(new java.awt.Color(0, 51, 51));

        jTableClientesConectados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IP", "Usuario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableClientesConectados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableClientesConectadosMouseClicked(evt);
            }
        });
        jTableClientesConectados.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableClientesConectadosKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTableClientesConectados);

        jBver.setText("Ver");
        jBver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBver, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jBver, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jMenu1.setText("Acciones en cadena");

        jMenuItemReiniciar.setText("Reiniciar todos");
        jMenuItemReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReiniciarActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemReiniciar);

        jMenuItemBloquear.setText("Bloquear todos");
        jMenuItemBloquear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBloquearActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemBloquear);

        jMenuItemApagar.setText("Apagar todos");
        jMenuItemApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemApagarActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemApagar);

        jMenuBar2.add(jMenu1);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIniciarActionPerformed
        // capturar el numero de puerto ingresado en el campoPuerto
        String puerto = campoPuerto.getText();
        // convetirlo en entero
        int puertoEntero;
        try {
            puertoEntero = Integer.parseInt(puerto);
        } catch (NumberFormatException error) {
            JOptionPane.showMessageDialog(this, "El puerto debe ser un  numero");
            return;
        }

        // verificar si el serivodor ya fue creado como instancia
        if (servidor == null) {

            // Reservamos espacio en memoria 
            servidor = new CRMIServer(puerto);
            servidor.setVentana(this);
            // Y ahora lo subimos
            iniciarServidor(servidor);
            botonIniciar.setText("Detener");
        } else {

            botonIniciar.setText("Iniciar");
            detenerServidor();
        }


    }//GEN-LAST:event_botonIniciarActionPerformed

    private void campoPuertoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoPuertoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            botonIniciarActionPerformed(null);
        }


    }//GEN-LAST:event_campoPuertoKeyPressed

    /**
     * Actualizará la tabla que contiene los pc que administré este servidor
     *
     * @return
     */
    public boolean actualizarTabla() {

        if (modeloTable.getRowCount() > 0) {
            // Es necesario declarar una variable dado a medida que se van eliminando
            //Row es número disminuye entonces, esto podría provocar un NullPointerException
            int rowCount = modeloTable.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                try {
                    modeloTable.removeRow(0);
                } catch (Exception e) {
                    System.out.println("Error al actualizar la tabla");
                }
            }
        }

        String enviarPropiedades;
        list.clear();
        for (OperacionesCliente col : servidor.getListClientes()) {

            try {
               Computador cliente = col.enviarDatos();

               list.add(cliente);

                String[] datos = {cliente.getIp(),cliente.getUsuario()};

                modeloTable.addRow(datos);
            } catch (RemoteException ex) {
                Logger.getLogger(VentanaRMIServerl.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        return true;
    }



    private void campoPuertoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoPuertoKeyTyped
        // TODO add your handling code here:

        // LO utilizamos para validar que solo ingrese número en el campo de text del puerto
        if (!(evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9')) {
            // Cuando se encuentra una cadena diferente a un número en consumida por el evento
            evt.consume();
        }
    }//GEN-LAST:event_campoPuertoKeyTyped

    private void jTableClientesConectadosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableClientesConectadosKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_jTableClientesConectadosKeyPressed

    private void jTableClientesConectadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableClientesConectadosMouseClicked


    }//GEN-LAST:event_jTableClientesConectadosMouseClicked



 


    private void jMenuItemBloquearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBloquearActionPerformed
        // TODO add your handling code here:
    
    }//GEN-LAST:event_jMenuItemBloquearActionPerformed

    private void jMenuItemApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemApagarActionPerformed
        // TODO add your handling code here:
 
        
    }//GEN-LAST:event_jMenuItemApagarActionPerformed

    private void jMenuItemReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReiniciarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemReiniciarActionPerformed

    private void jBverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBverActionPerformed
    
        for(Computador l :list){//iteramos sobre la lista de los clientes conectados
            if(jTableClientesConectados.getValueAt(jTableClientesConectados.getSelectedRow(),0).equals(l.getIp())){//obtenemos la fila y el contenido en la columna
                JOptionPane.showMessageDialog(null, ""
                                + "Nombre Usuario:         " + l.getUsuario()
                                + "\nSistema Operativo:    " + l.getSo()
                                + "\nDescripcion del SO:   " + l.getDescripcionSO()
                                + "\nArquitectura de SO:   " + l.getArquitecturaSO()
                                + "\nMemoria RAM:          " + l.getRam()
                                + "\nProcesador:           " + l.getProcesador()
                                + "\nFabricante:           " + l.getFabricanteProcesador()
                                + "\nNumero de nucleos:    " + l.getNucleoProcesador()
                                + "\nDireccion IP:         " + l.getIp()
                                + "\nMAC:                  " + l.getMac()
                        );
            }
        }
        
            // TODO add your handling code here:
    }//GEN-LAST:event_jBverActionPerformed


    /*
     Aqui escribimos el codigo que deseamos agregar a la ventana para que
     realice el comportamiento que deseamos y tenga la apariencia que queremos
     */
    // metodo para mostrar un error, por ahora esta vacio pero depues colocaremos 
    // el codigo para que lo muestre en una caja de texto
    public void mostrarMensajes(String mensaje) {
        // creamos una instancia para dar formato a la fecha AÑO-MES-DIA HORA:MINUTOS:SEGUNDOS AM/PM
        SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
        // obtenemos la fecha actual del sistema y le aplicamos el formato
        String fechaActual = formatoFecha.format(new Date());
        // mostramos la fecha actual
        System.out.println("\n\n" + fechaActual);
        // mostramos el mensaje debejo de la fecha actual, el \n es para que inicie en otra linea
        System.out.println("\n" + mensaje);

    }

//    public boolean notificacion(String cadena) {
//
//        JOptionPane.showMessageDialog(null, cadena);
//        return true;
//    }

    public void actualizarClientesConectados() {
        // JlabelClientesConectados.setText("" + Servidor.getListaClientesConectados().size());
    }

  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonIniciar;
    private javax.swing.JTextField campoPuerto;
    private javax.swing.JButton jBver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelIP;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItemApagar;
    private javax.swing.JMenuItem jMenuItemBloquear;
    private javax.swing.JMenuItem jMenuItemReiniciar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableClientesConectados;
    // End of variables declaration//GEN-END:variables
}
